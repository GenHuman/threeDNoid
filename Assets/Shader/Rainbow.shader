Shader "Rainbow"
{
	Properties
	{
		Vector1_4EA516C8("Rotation ", Float) = 0
Vector1_F527440("Speed ", Float) = 1
Vector3_9CE3C5CA("Brightness", Vector) = (1,0,0,0)
Vector1_5E97D8B6("Tiling ", Float) = 1

	}
		SubShader
	{
		Tags
		{
			"RenderPipeline" = "LightweightPipeline"
			"RenderType" = "Opaque"
			"Queue" = "Geometry+0"
		}
		Pass
		{
			Tags{"LightMode" = "LightweightForward"}

			// Material options generated by graph

			Blend One Zero, One Zero

			Cull Off

			ZTest LEqual

			ZWrite On

			HLSLPROGRAM
		// Required to compile gles 2.0 with standard srp library
		#pragma prefer_hlslcc gles
		#pragma exclude_renderers d3d11_9x
		#pragma target 2.0


		#pragma shader_feature _RECEIVE_SHADOWS_OFF
		// -------------------------------------
		// Lightweight Pipeline keywords
		#pragma multi_compile _ _MAIN_LIGHT_SHADOWS
		#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
		#pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
		#pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
		#pragma multi_compile _ _SHADOWS_SOFT
		#pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE

		// -------------------------------------
		// Unity defined keywords
		#pragma multi_compile _ DIRLIGHTMAP_COMBINED
		#pragma multi_compile _ LIGHTMAP_ON
		#pragma multi_compile_fog

		//--------------------------------------
		// GPU Instancing
		#pragma multi_compile_instancing

		#pragma vertex vert
		#pragma fragment frag

		// Defines generated by graph

		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

		CBUFFER_START(UnityPerMaterial)
		float Vector1_4EA516C8;
		float Vector1_F527440;
		float3 Vector3_9CE3C5CA;
		float Vector1_5E97D8B6;
		CBUFFER_END

		struct VertexDescriptionInputs
		{
			float3 ObjectSpacePosition;
		};

		struct SurfaceDescriptionInputs
		{
			float3 ObjectSpaceNormal;
			float3 TangentSpaceNormal;
			half4 uv0;
			float3 TimeParameters;
		};


		void Unity_Rotate_Degrees_float(float2 UV, float2 Center, float Rotation, out float2 Out)
		{
			//rotation matrix
			Rotation = Rotation * (3.1415926f / 180.0f);
			UV -= Center;
			float s = sin(Rotation);
			float c = cos(Rotation);

			//center rotation matrix
			float2x2 rMatrix = float2x2(c, -s, s, c);
			rMatrix *= 0.5;
			rMatrix += 0.5;
			rMatrix = rMatrix * 2 - 1;

			//multiply the UVs by the rotation matrix
			UV.xy = mul(UV.xy, rMatrix);
			UV += Center;

			Out = UV;
		}

		void Unity_Multiply_float(float A, float B, out float Out)
		{
			Out = A * B;
		}

		void SawtoothWave_float(float In, out float Out)
		{
			Out = 2 * (In - floor(0.5 + In));
		}

		void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
		{
			Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
		}

		void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
		{
			Out = UV * Tiling + Offset;
		}

		void Unity_Multiply_float(float2 A, float2 B, out float2 Out)
		{
			Out = A * B;
		}

		void Unity_Hue_Normalized_float(float3 In, float Offset, out float3 Out)
		{
			// RGB to HSV
			float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
			float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
			float D = Q.x - min(Q.w, Q.y);
			float E = 1e-10;
			float3 hsv = float3(abs(Q.z + (Q.w - Q.y) / (6.0 * D + E)), D / (Q.x + E), Q.x);

			float hue = hsv.x + Offset;
			hsv.x = (hue < 0)
					? hue + 1
					: (hue > 1)
						? hue - 1
						: hue;

			// HSV to RGB
			float4 K2 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
			float3 P2 = abs(frac(hsv.xxx + K2.xyz) * 6.0 - K2.www);
			Out = hsv.z * lerp(K2.xxx, saturate(P2 - K2.xxx), hsv.y);
		}

		void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
		{
			Out = dot(A, B);
		}

		void Unity_Clamp_float(float In, float Min, float Max, out float Out)
		{
			Out = clamp(In, Min, Max);
		}

		void Unity_Multiply_float(float3 A, float3 B, out float3 Out)
		{
			Out = A * B;
		}

		void Unity_Add_float3(float3 A, float3 B, out float3 Out)
		{
			Out = A + B;
		}

		struct VertexDescription
		{
			float3 Position;
		};

		VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
		{
			VertexDescription description = (VertexDescription)0;
			description.Position = IN.ObjectSpacePosition;
			return description;
		}

		struct SurfaceDescription
		{
			float3 Albedo;
			float3 Normal;
			float3 Emission;
			float Metallic;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
		};

		SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
		{
			SurfaceDescription surface = (SurfaceDescription)0;
			float3 _Property_46BF40E4_Out_0 = Vector3_9CE3C5CA;
			float _Property_AC2DE604_Out_0 = Vector1_4EA516C8;
			float2 _Rotate_8BCED528_Out_3;
			Unity_Rotate_Degrees_float(IN.uv0.xy, float2 (0, 0), _Property_AC2DE604_Out_0, _Rotate_8BCED528_Out_3);
			float _Property_E99C1633_Out_0 = Vector1_F527440;
			float _Multiply_B6D7DBEA_Out_2;
			Unity_Multiply_float(IN.TimeParameters.x, _Property_E99C1633_Out_0, _Multiply_B6D7DBEA_Out_2);
			float _SawtoothWave_82A17912_Out_1;
			SawtoothWave_float(_Multiply_B6D7DBEA_Out_2, _SawtoothWave_82A17912_Out_1);
			float _Remap_D5C587C4_Out_3;
			Unity_Remap_float(_SawtoothWave_82A17912_Out_1, float2 (-1, 1), float2 (0, 1), _Remap_D5C587C4_Out_3);
			float2 _TilingAndOffset_5D7BEC6_Out_3;
			Unity_TilingAndOffset_float(_Rotate_8BCED528_Out_3, float2 (1, 1), (_Remap_D5C587C4_Out_3.xx), _TilingAndOffset_5D7BEC6_Out_3);
			float2 _Multiply_4269420F_Out_2;
			Unity_Multiply_float(_TilingAndOffset_5D7BEC6_Out_3, float2(1, 0), _Multiply_4269420F_Out_2);
			float3 _Hue_C8049E61_Out_2;
			Unity_Hue_Normalized_float(_Property_46BF40E4_Out_0, (_Multiply_4269420F_Out_2).x, _Hue_C8049E61_Out_2);
			float _DotProduct_B23167C2_Out_2;
			Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 3, 0), _DotProduct_B23167C2_Out_2);
			float _Clamp_6DBB7D3_Out_3;
			Unity_Clamp_float(_DotProduct_B23167C2_Out_2, 0, 1, _Clamp_6DBB7D3_Out_3);
			float3 _Multiply_6E3BD1F4_Out_2;
			Unity_Multiply_float(_Hue_C8049E61_Out_2, (_Clamp_6DBB7D3_Out_3.xxx), _Multiply_6E3BD1F4_Out_2);
			float _DotProduct_86C002BE_Out_2;
			Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 0, -1), _DotProduct_86C002BE_Out_2);
			float _Clamp_91CB4D22_Out_3;
			Unity_Clamp_float(_DotProduct_86C002BE_Out_2, 0, 1, _Clamp_91CB4D22_Out_3);
			float3 _Property_45FD8123_Out_0 = Vector3_9CE3C5CA;
			float2 _TilingAndOffset_C249058B_Out_3;
			Unity_TilingAndOffset_float(IN.uv0.xy, float2 (1, 1), (_Remap_D5C587C4_Out_3.xx), _TilingAndOffset_C249058B_Out_3);
			float2 _Multiply_8483FBB_Out_2;
			Unity_Multiply_float(_TilingAndOffset_C249058B_Out_3, float2(1, 0), _Multiply_8483FBB_Out_2);
			float3 _Hue_7F9EC219_Out_2;
			Unity_Hue_Normalized_float(_Property_45FD8123_Out_0, (_Multiply_8483FBB_Out_2).x, _Hue_7F9EC219_Out_2);
			float3 _Multiply_8BA0677C_Out_2;
			Unity_Multiply_float((_Clamp_91CB4D22_Out_3.xxx), _Hue_7F9EC219_Out_2, _Multiply_8BA0677C_Out_2);
			float _DotProduct_CBB43A1C_Out_2;
			Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 0, 1), _DotProduct_CBB43A1C_Out_2);
			float _Clamp_8F0CC6C9_Out_3;
			Unity_Clamp_float(_DotProduct_CBB43A1C_Out_2, 0, 1, _Clamp_8F0CC6C9_Out_3);
			float3 _Multiply_51583BDF_Out_2;
			Unity_Multiply_float((_Clamp_8F0CC6C9_Out_3.xxx), _Hue_7F9EC219_Out_2, _Multiply_51583BDF_Out_2);
			float3 _Add_153B9028_Out_2;
			Unity_Add_float3(_Multiply_8BA0677C_Out_2, _Multiply_51583BDF_Out_2, _Add_153B9028_Out_2);
			float3 _Add_8E9A68D5_Out_2;
			Unity_Add_float3(_Multiply_6E3BD1F4_Out_2, _Add_153B9028_Out_2, _Add_8E9A68D5_Out_2);
			float _DotProduct_20D99D5B_Out_2;
			Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(-1, 0, 0), _DotProduct_20D99D5B_Out_2);
			float _Clamp_ABF00F4A_Out_3;
			Unity_Clamp_float(_DotProduct_20D99D5B_Out_2, 0, 1, _Clamp_ABF00F4A_Out_3);
			float3 _Property_6D7BAC07_Out_0 = Vector3_9CE3C5CA;
			float _Property_36597EC1_Out_0 = Vector1_F527440;
			float _Multiply_DA7D2E0F_Out_2;
			Unity_Multiply_float(IN.TimeParameters.x, _Property_36597EC1_Out_0, _Multiply_DA7D2E0F_Out_2);
			float _SawtoothWave_51BEAF94_Out_1;
			SawtoothWave_float(_Multiply_DA7D2E0F_Out_2, _SawtoothWave_51BEAF94_Out_1);
			float _Remap_2B1AF1EA_Out_3;
			Unity_Remap_float(_SawtoothWave_51BEAF94_Out_1, float2 (-1, 1), float2 (1, 2), _Remap_2B1AF1EA_Out_3);
			float3 _Hue_4801A435_Out_2;
			Unity_Hue_Normalized_float(_Property_6D7BAC07_Out_0, _Remap_2B1AF1EA_Out_3, _Hue_4801A435_Out_2);
			float3 _Multiply_54D4AE1F_Out_2;
			Unity_Multiply_float((_Clamp_ABF00F4A_Out_3.xxx), _Hue_4801A435_Out_2, _Multiply_54D4AE1F_Out_2);
			float _DotProduct_1D7446D4_Out_2;
			Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(1, 0, 0), _DotProduct_1D7446D4_Out_2);
			float _Clamp_63F3AD00_Out_3;
			Unity_Clamp_float(_DotProduct_1D7446D4_Out_2, 0, 1, _Clamp_63F3AD00_Out_3);
			float3 _Multiply_AEC30BB1_Out_2;
			Unity_Multiply_float((_Clamp_63F3AD00_Out_3.xxx), _Hue_4801A435_Out_2, _Multiply_AEC30BB1_Out_2);
			float3 _Add_51F960E3_Out_2;
			Unity_Add_float3(_Multiply_54D4AE1F_Out_2, _Multiply_AEC30BB1_Out_2, _Add_51F960E3_Out_2);
			float3 _Add_66DF0F1D_Out_2;
			Unity_Add_float3(_Add_8E9A68D5_Out_2, _Add_51F960E3_Out_2, _Add_66DF0F1D_Out_2);
			surface.Albedo = _Add_66DF0F1D_Out_2;
			surface.Normal = IN.TangentSpaceNormal;
			surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
			surface.Metallic = 0;
			surface.Smoothness = 0.5;
			surface.Occlusion = 1;
			surface.Alpha = 1;
			surface.AlphaClipThreshold = 0;
			return surface;
		}

		struct GraphVertexInput
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			float4 tangent : TANGENT;
			float4 texcoord0 : TEXCOORD0;
			float4 texcoord1 : TEXCOORD1;
			UNITY_VERTEX_INPUT_INSTANCE_ID
		};


		struct GraphVertexOutput
		{
			float4 clipPos                : SV_POSITION;
			DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 0);
			half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
			float4 shadowCoord            : TEXCOORD2;

			// Interpolators defined by graph
			float3 WorldSpacePosition : TEXCOORD3;
			float3 WorldSpaceNormal : TEXCOORD4;
			float3 WorldSpaceTangent : TEXCOORD5;
			float3 WorldSpaceBiTangent : TEXCOORD6;
			float3 WorldSpaceViewDirection : TEXCOORD7;
			half4 uv0 : TEXCOORD8;
			half4 uv1 : TEXCOORD9;

			UNITY_VERTEX_INPUT_INSTANCE_ID
			UNITY_VERTEX_OUTPUT_STEREO
		};

		GraphVertexOutput vert(GraphVertexInput v)
		{
			GraphVertexOutput o = (GraphVertexOutput)0;
			UNITY_SETUP_INSTANCE_ID(v);
			UNITY_TRANSFER_INSTANCE_ID(v, o);
			UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

			// Vertex transformations performed by graph
			float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
			float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
			float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
			float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
			float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
			float4 uv0 = v.texcoord0;
			float4 uv1 = v.texcoord1;
			float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

			VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

			// Vertex description inputs defined by graph
			vdi.ObjectSpacePosition = ObjectSpacePosition;

			VertexDescription vd = PopulateVertexData(vdi);
			v.vertex.xyz = vd.Position;

			// Vertex shader outputs defined by graph
			o.WorldSpacePosition = WorldSpacePosition;
			o.WorldSpaceNormal = WorldSpaceNormal;
			o.WorldSpaceTangent = WorldSpaceTangent;
			o.WorldSpaceBiTangent = WorldSpaceBiTangent;
			o.WorldSpaceViewDirection = WorldSpaceViewDirection;
			o.uv0 = uv0;
			o.uv1 = uv1;

			float3 lwWNormal = TransformObjectToWorldNormal(v.normal);

			VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);

			// We either sample GI from lightmap or SH.
			// Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
			// see DECLARE_LIGHTMAP_OR_SH macro.
			// The following funcions initialize the correct variable with correct data
			OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUV);
			OUTPUT_SH(lwWNormal, o.vertexSH);

			half3 vertexLight = VertexLighting(vertexInput.positionWS, lwWNormal);
			half fogFactor = ComputeFogFactor(vertexInput.positionCS.z);
			o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
			o.clipPos = vertexInput.positionCS;

		#ifdef _MAIN_LIGHT_SHADOWS
			o.shadowCoord = GetShadowCoord(vertexInput);
		#endif
			return o;
		}

		half4 frag(GraphVertexOutput IN) : SV_Target
		{
			UNITY_SETUP_INSTANCE_ID(IN);
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

			// Pixel transformations performed by graph
			float3 WorldSpacePosition = IN.WorldSpacePosition;
			float3 WorldSpaceNormal = IN.WorldSpaceNormal;
			float3 WorldSpaceTangent = IN.WorldSpaceTangent;
			float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
			float4 uv0 = IN.uv0;
			float4 uv1 = IN.uv1;
			float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
			float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

			SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

			// Surface description inputs defined by graph
			surfaceInput.ObjectSpaceNormal = ObjectSpaceNormal;
			surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
			surfaceInput.uv0 = uv0;
			surfaceInput.TimeParameters = _TimeParameters.xyz;

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			float3 Albedo = float3(0.5, 0.5, 0.5);
			float3 Specular = float3(0, 0, 0);
			float Metallic = 1;
			float3 Normal = float3(0, 0, 1);
			float3 Emission = 0;
			float Smoothness = 0.5;
			float Occlusion = 1;
			float Alpha = 1;
			float AlphaClipThreshold = 0;

			// Surface description remap performed by graph
			Albedo = surf.Albedo;
			Normal = surf.Normal;
			Emission = surf.Emission;
			Metallic = surf.Metallic;
			Smoothness = surf.Smoothness;
			Occlusion = surf.Occlusion;
			Alpha = surf.Alpha;
			AlphaClipThreshold = surf.AlphaClipThreshold;

			InputData inputData;
			inputData.positionWS = WorldSpacePosition;

	#ifdef _NORMALMAP
			inputData.normalWS = normalize(TransformTangentToWorld(Normal, half3x3(WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal)));
	#else
		#if !SHADER_HINT_NICE_QUALITY
			inputData.normalWS = WorldSpaceNormal;
		#else
			inputData.normalWS = normalize(WorldSpaceNormal);
		#endif
	#endif

	#if !SHADER_HINT_NICE_QUALITY
			// viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
			inputData.viewDirectionWS = WorldSpaceViewDirection;
	#else
			inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
	#endif

			inputData.shadowCoord = IN.shadowCoord;

			inputData.fogCoord = IN.fogFactorAndVertexLight.x;
			inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
			inputData.bakedGI = SAMPLE_GI(IN.lightmapUV, IN.vertexSH, inputData.normalWS);

			half4 color = LightweightFragmentPBR(
				inputData,
				Albedo,
				Metallic,
				Specular,
				Smoothness,
				Occlusion,
				Emission,
				Alpha);

			// Computes fog factor per-vertex
			color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);

	#if _AlphaClip
			clip(Alpha - AlphaClipThreshold);
	#endif
			return color;
		}

		ENDHLSL
	}
	Pass
	{
		Name "ShadowCaster"
		Tags{"LightMode" = "ShadowCaster"}

		ZWrite On ZTest LEqual

			// Material options generated by graph
			Cull Off

			HLSLPROGRAM
			// Required to compile gles 2.0 with standard srp library
			#pragma prefer_hlslcc gles
			#pragma exclude_renderers d3d11_9x
			#pragma target 2.0

			//--------------------------------------
			// GPU Instancing
			#pragma multi_compile_instancing

			#pragma vertex ShadowPassVertex
			#pragma fragment ShadowPassFragment

			// Defines generated by graph

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			CBUFFER_START(UnityPerMaterial)
			float Vector1_4EA516C8;
			float Vector1_F527440;
			float3 Vector3_9CE3C5CA;
			float Vector1_5E97D8B6;
			CBUFFER_END

			struct VertexDescriptionInputs
			{
				float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				float3 ObjectSpaceNormal;
				float3 TangentSpaceNormal;
				half4 uv0;
				float3 TimeParameters;
			};


			void Unity_Rotate_Degrees_float(float2 UV, float2 Center, float Rotation, out float2 Out)
			{
				//rotation matrix
				Rotation = Rotation * (3.1415926f / 180.0f);
				UV -= Center;
				float s = sin(Rotation);
				float c = cos(Rotation);

				//center rotation matrix
				float2x2 rMatrix = float2x2(c, -s, s, c);
				rMatrix *= 0.5;
				rMatrix += 0.5;
				rMatrix = rMatrix * 2 - 1;

				//multiply the UVs by the rotation matrix
				UV.xy = mul(UV.xy, rMatrix);
				UV += Center;

				Out = UV;
			}

			void Unity_Multiply_float(float A, float B, out float Out)
			{
				Out = A * B;
			}

			void SawtoothWave_float(float In, out float Out)
			{
				Out = 2 * (In - floor(0.5 + In));
			}

			void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
			{
				Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
			}

			void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
			{
				Out = UV * Tiling + Offset;
			}

			void Unity_Multiply_float(float2 A, float2 B, out float2 Out)
			{
				Out = A * B;
			}

			void Unity_Hue_Normalized_float(float3 In, float Offset, out float3 Out)
			{
				// RGB to HSV
				float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
				float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
				float D = Q.x - min(Q.w, Q.y);
				float E = 1e-10;
				float3 hsv = float3(abs(Q.z + (Q.w - Q.y) / (6.0 * D + E)), D / (Q.x + E), Q.x);

				float hue = hsv.x + Offset;
				hsv.x = (hue < 0)
						? hue + 1
						: (hue > 1)
							? hue - 1
							: hue;

				// HSV to RGB
				float4 K2 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				float3 P2 = abs(frac(hsv.xxx + K2.xyz) * 6.0 - K2.www);
				Out = hsv.z * lerp(K2.xxx, saturate(P2 - K2.xxx), hsv.y);
			}

			void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
			{
				Out = dot(A, B);
			}

			void Unity_Clamp_float(float In, float Min, float Max, out float Out)
			{
				Out = clamp(In, Min, Max);
			}

			void Unity_Multiply_float(float3 A, float3 B, out float3 Out)
			{
				Out = A * B;
			}

			void Unity_Add_float3(float3 A, float3 B, out float3 Out)
			{
				Out = A + B;
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Emission;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float3 _Property_46BF40E4_Out_0 = Vector3_9CE3C5CA;
				float _Property_AC2DE604_Out_0 = Vector1_4EA516C8;
				float2 _Rotate_8BCED528_Out_3;
				Unity_Rotate_Degrees_float(IN.uv0.xy, float2 (0, 0), _Property_AC2DE604_Out_0, _Rotate_8BCED528_Out_3);
				float _Property_E99C1633_Out_0 = Vector1_F527440;
				float _Multiply_B6D7DBEA_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_E99C1633_Out_0, _Multiply_B6D7DBEA_Out_2);
				float _SawtoothWave_82A17912_Out_1;
				SawtoothWave_float(_Multiply_B6D7DBEA_Out_2, _SawtoothWave_82A17912_Out_1);
				float _Remap_D5C587C4_Out_3;
				Unity_Remap_float(_SawtoothWave_82A17912_Out_1, float2 (-1, 1), float2 (0, 1), _Remap_D5C587C4_Out_3);
				float2 _TilingAndOffset_5D7BEC6_Out_3;
				Unity_TilingAndOffset_float(_Rotate_8BCED528_Out_3, float2 (1, 1), (_Remap_D5C587C4_Out_3.xx), _TilingAndOffset_5D7BEC6_Out_3);
				float2 _Multiply_4269420F_Out_2;
				Unity_Multiply_float(_TilingAndOffset_5D7BEC6_Out_3, float2(1, 0), _Multiply_4269420F_Out_2);
				float3 _Hue_C8049E61_Out_2;
				Unity_Hue_Normalized_float(_Property_46BF40E4_Out_0, (_Multiply_4269420F_Out_2).x, _Hue_C8049E61_Out_2);
				float _DotProduct_B23167C2_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 3, 0), _DotProduct_B23167C2_Out_2);
				float _Clamp_6DBB7D3_Out_3;
				Unity_Clamp_float(_DotProduct_B23167C2_Out_2, 0, 1, _Clamp_6DBB7D3_Out_3);
				float3 _Multiply_6E3BD1F4_Out_2;
				Unity_Multiply_float(_Hue_C8049E61_Out_2, (_Clamp_6DBB7D3_Out_3.xxx), _Multiply_6E3BD1F4_Out_2);
				float _DotProduct_86C002BE_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 0, -1), _DotProduct_86C002BE_Out_2);
				float _Clamp_91CB4D22_Out_3;
				Unity_Clamp_float(_DotProduct_86C002BE_Out_2, 0, 1, _Clamp_91CB4D22_Out_3);
				float3 _Property_45FD8123_Out_0 = Vector3_9CE3C5CA;
				float2 _TilingAndOffset_C249058B_Out_3;
				Unity_TilingAndOffset_float(IN.uv0.xy, float2 (1, 1), (_Remap_D5C587C4_Out_3.xx), _TilingAndOffset_C249058B_Out_3);
				float2 _Multiply_8483FBB_Out_2;
				Unity_Multiply_float(_TilingAndOffset_C249058B_Out_3, float2(1, 0), _Multiply_8483FBB_Out_2);
				float3 _Hue_7F9EC219_Out_2;
				Unity_Hue_Normalized_float(_Property_45FD8123_Out_0, (_Multiply_8483FBB_Out_2).x, _Hue_7F9EC219_Out_2);
				float3 _Multiply_8BA0677C_Out_2;
				Unity_Multiply_float((_Clamp_91CB4D22_Out_3.xxx), _Hue_7F9EC219_Out_2, _Multiply_8BA0677C_Out_2);
				float _DotProduct_CBB43A1C_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 0, 1), _DotProduct_CBB43A1C_Out_2);
				float _Clamp_8F0CC6C9_Out_3;
				Unity_Clamp_float(_DotProduct_CBB43A1C_Out_2, 0, 1, _Clamp_8F0CC6C9_Out_3);
				float3 _Multiply_51583BDF_Out_2;
				Unity_Multiply_float((_Clamp_8F0CC6C9_Out_3.xxx), _Hue_7F9EC219_Out_2, _Multiply_51583BDF_Out_2);
				float3 _Add_153B9028_Out_2;
				Unity_Add_float3(_Multiply_8BA0677C_Out_2, _Multiply_51583BDF_Out_2, _Add_153B9028_Out_2);
				float3 _Add_8E9A68D5_Out_2;
				Unity_Add_float3(_Multiply_6E3BD1F4_Out_2, _Add_153B9028_Out_2, _Add_8E9A68D5_Out_2);
				float _DotProduct_20D99D5B_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(-1, 0, 0), _DotProduct_20D99D5B_Out_2);
				float _Clamp_ABF00F4A_Out_3;
				Unity_Clamp_float(_DotProduct_20D99D5B_Out_2, 0, 1, _Clamp_ABF00F4A_Out_3);
				float3 _Property_6D7BAC07_Out_0 = Vector3_9CE3C5CA;
				float _Property_36597EC1_Out_0 = Vector1_F527440;
				float _Multiply_DA7D2E0F_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_36597EC1_Out_0, _Multiply_DA7D2E0F_Out_2);
				float _SawtoothWave_51BEAF94_Out_1;
				SawtoothWave_float(_Multiply_DA7D2E0F_Out_2, _SawtoothWave_51BEAF94_Out_1);
				float _Remap_2B1AF1EA_Out_3;
				Unity_Remap_float(_SawtoothWave_51BEAF94_Out_1, float2 (-1, 1), float2 (1, 2), _Remap_2B1AF1EA_Out_3);
				float3 _Hue_4801A435_Out_2;
				Unity_Hue_Normalized_float(_Property_6D7BAC07_Out_0, _Remap_2B1AF1EA_Out_3, _Hue_4801A435_Out_2);
				float3 _Multiply_54D4AE1F_Out_2;
				Unity_Multiply_float((_Clamp_ABF00F4A_Out_3.xxx), _Hue_4801A435_Out_2, _Multiply_54D4AE1F_Out_2);
				float _DotProduct_1D7446D4_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(1, 0, 0), _DotProduct_1D7446D4_Out_2);
				float _Clamp_63F3AD00_Out_3;
				Unity_Clamp_float(_DotProduct_1D7446D4_Out_2, 0, 1, _Clamp_63F3AD00_Out_3);
				float3 _Multiply_AEC30BB1_Out_2;
				Unity_Multiply_float((_Clamp_63F3AD00_Out_3.xxx), _Hue_4801A435_Out_2, _Multiply_AEC30BB1_Out_2);
				float3 _Add_51F960E3_Out_2;
				Unity_Add_float3(_Multiply_54D4AE1F_Out_2, _Multiply_AEC30BB1_Out_2, _Add_51F960E3_Out_2);
				float3 _Add_66DF0F1D_Out_2;
				Unity_Add_float3(_Add_8E9A68D5_Out_2, _Add_51F960E3_Out_2, _Add_66DF0F1D_Out_2);
				surface.Albedo = _Add_66DF0F1D_Out_2;
				surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
				surface.Alpha = 1;
				surface.AlphaClipThreshold = 0;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord0 : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct VertexOutput
			{
				float2 uv           : TEXCOORD0;
				float4 clipPos      : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				half4 uv0 : TEXCOORD8;
				half4 uv1 : TEXCOORD9;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			float3 _LightDirection;

			VertexOutput ShadowPassVertex(GraphVertexInput v)
			{
				VertexOutput o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);

				// Vertex transformations performed by graph
				float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
				float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 uv0 = v.texcoord0;
				float4 uv1 = v.texcoord1;
				float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

				VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

				// Vertex description inputs defined by graph
				vdi.ObjectSpacePosition = ObjectSpacePosition;

				VertexDescription vd = PopulateVertexData(vdi);
				v.vertex.xyz = vd.Position;

				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.uv0 = uv0;
				o.uv1 = uv1;


				float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
				float3 normalWS = TransformObjectToWorldNormal(v.normal);

				float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

			#if UNITY_REVERSED_Z
				clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
			#else
				clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
			#endif
				o.clipPos = clipPos;

				return o;
			}

			half4 ShadowPassFragment(VertexOutput IN) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);

			// Pixel transformations performed by graph
			float3 WorldSpacePosition = IN.WorldSpacePosition;
			float3 WorldSpaceNormal = IN.WorldSpaceNormal;
			float3 WorldSpaceTangent = IN.WorldSpaceTangent;
			float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
			float4 uv0 = IN.uv0;
			float4 uv1 = IN.uv1;
			float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
			float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

			SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

			// Surface description inputs defined by graph
			surfaceInput.ObjectSpaceNormal = ObjectSpaceNormal;
			surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
			surfaceInput.uv0 = uv0;
			surfaceInput.TimeParameters = _TimeParameters.xyz;

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			float3 Albedo = float3(0.5, 0.5, 0.5);
			float3 Emission = 0;
			float Alpha = 1;
			float AlphaClipThreshold = 0;

			// Surface description remap performed by graph
			Albedo = surf.Albedo;
			Emission = surf.Emission;
			Alpha = surf.Alpha;
			AlphaClipThreshold = surf.AlphaClipThreshold;

	 #if _AlphaClip
			clip(Alpha - AlphaClipThreshold);
	#endif
			return 0;
		}

		ENDHLSL
	}

	Pass
	{
		Name "DepthOnly"
		Tags{"LightMode" = "DepthOnly"}

		ZWrite On
		ColorMask 0

			// Material options generated by graph
			Cull Off

			HLSLPROGRAM
			// Required to compile gles 2.0 with standard srp library
			#pragma prefer_hlslcc gles
			#pragma exclude_renderers d3d11_9x
			#pragma target 2.0

			//--------------------------------------
			// GPU Instancing
			#pragma multi_compile_instancing

			#pragma vertex vert
			#pragma fragment frag

			// Defines generated by graph

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			CBUFFER_START(UnityPerMaterial)
			float Vector1_4EA516C8;
			float Vector1_F527440;
			float3 Vector3_9CE3C5CA;
			float Vector1_5E97D8B6;
			CBUFFER_END

			struct VertexDescriptionInputs
			{
				float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				float3 ObjectSpaceNormal;
				float3 TangentSpaceNormal;
				half4 uv0;
				float3 TimeParameters;
			};


			void Unity_Rotate_Degrees_float(float2 UV, float2 Center, float Rotation, out float2 Out)
			{
				//rotation matrix
				Rotation = Rotation * (3.1415926f / 180.0f);
				UV -= Center;
				float s = sin(Rotation);
				float c = cos(Rotation);

				//center rotation matrix
				float2x2 rMatrix = float2x2(c, -s, s, c);
				rMatrix *= 0.5;
				rMatrix += 0.5;
				rMatrix = rMatrix * 2 - 1;

				//multiply the UVs by the rotation matrix
				UV.xy = mul(UV.xy, rMatrix);
				UV += Center;

				Out = UV;
			}

			void Unity_Multiply_float(float A, float B, out float Out)
			{
				Out = A * B;
			}

			void SawtoothWave_float(float In, out float Out)
			{
				Out = 2 * (In - floor(0.5 + In));
			}

			void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
			{
				Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
			}

			void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
			{
				Out = UV * Tiling + Offset;
			}

			void Unity_Multiply_float(float2 A, float2 B, out float2 Out)
			{
				Out = A * B;
			}

			void Unity_Hue_Normalized_float(float3 In, float Offset, out float3 Out)
			{
				// RGB to HSV
				float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
				float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
				float D = Q.x - min(Q.w, Q.y);
				float E = 1e-10;
				float3 hsv = float3(abs(Q.z + (Q.w - Q.y) / (6.0 * D + E)), D / (Q.x + E), Q.x);

				float hue = hsv.x + Offset;
				hsv.x = (hue < 0)
						? hue + 1
						: (hue > 1)
							? hue - 1
							: hue;

				// HSV to RGB
				float4 K2 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				float3 P2 = abs(frac(hsv.xxx + K2.xyz) * 6.0 - K2.www);
				Out = hsv.z * lerp(K2.xxx, saturate(P2 - K2.xxx), hsv.y);
			}

			void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
			{
				Out = dot(A, B);
			}

			void Unity_Clamp_float(float In, float Min, float Max, out float Out)
			{
				Out = clamp(In, Min, Max);
			}

			void Unity_Multiply_float(float3 A, float3 B, out float3 Out)
			{
				Out = A * B;
			}

			void Unity_Add_float3(float3 A, float3 B, out float3 Out)
			{
				Out = A + B;
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Emission;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float3 _Property_46BF40E4_Out_0 = Vector3_9CE3C5CA;
				float _Property_AC2DE604_Out_0 = Vector1_4EA516C8;
				float2 _Rotate_8BCED528_Out_3;
				Unity_Rotate_Degrees_float(IN.uv0.xy, float2 (0, 0), _Property_AC2DE604_Out_0, _Rotate_8BCED528_Out_3);
				float _Property_E99C1633_Out_0 = Vector1_F527440;
				float _Multiply_B6D7DBEA_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_E99C1633_Out_0, _Multiply_B6D7DBEA_Out_2);
				float _SawtoothWave_82A17912_Out_1;
				SawtoothWave_float(_Multiply_B6D7DBEA_Out_2, _SawtoothWave_82A17912_Out_1);
				float _Remap_D5C587C4_Out_3;
				Unity_Remap_float(_SawtoothWave_82A17912_Out_1, float2 (-1, 1), float2 (0, 1), _Remap_D5C587C4_Out_3);
				float2 _TilingAndOffset_5D7BEC6_Out_3;
				Unity_TilingAndOffset_float(_Rotate_8BCED528_Out_3, float2 (1, 1), (_Remap_D5C587C4_Out_3.xx), _TilingAndOffset_5D7BEC6_Out_3);
				float2 _Multiply_4269420F_Out_2;
				Unity_Multiply_float(_TilingAndOffset_5D7BEC6_Out_3, float2(1, 0), _Multiply_4269420F_Out_2);
				float3 _Hue_C8049E61_Out_2;
				Unity_Hue_Normalized_float(_Property_46BF40E4_Out_0, (_Multiply_4269420F_Out_2).x, _Hue_C8049E61_Out_2);
				float _DotProduct_B23167C2_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 3, 0), _DotProduct_B23167C2_Out_2);
				float _Clamp_6DBB7D3_Out_3;
				Unity_Clamp_float(_DotProduct_B23167C2_Out_2, 0, 1, _Clamp_6DBB7D3_Out_3);
				float3 _Multiply_6E3BD1F4_Out_2;
				Unity_Multiply_float(_Hue_C8049E61_Out_2, (_Clamp_6DBB7D3_Out_3.xxx), _Multiply_6E3BD1F4_Out_2);
				float _DotProduct_86C002BE_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 0, -1), _DotProduct_86C002BE_Out_2);
				float _Clamp_91CB4D22_Out_3;
				Unity_Clamp_float(_DotProduct_86C002BE_Out_2, 0, 1, _Clamp_91CB4D22_Out_3);
				float3 _Property_45FD8123_Out_0 = Vector3_9CE3C5CA;
				float2 _TilingAndOffset_C249058B_Out_3;
				Unity_TilingAndOffset_float(IN.uv0.xy, float2 (1, 1), (_Remap_D5C587C4_Out_3.xx), _TilingAndOffset_C249058B_Out_3);
				float2 _Multiply_8483FBB_Out_2;
				Unity_Multiply_float(_TilingAndOffset_C249058B_Out_3, float2(1, 0), _Multiply_8483FBB_Out_2);
				float3 _Hue_7F9EC219_Out_2;
				Unity_Hue_Normalized_float(_Property_45FD8123_Out_0, (_Multiply_8483FBB_Out_2).x, _Hue_7F9EC219_Out_2);
				float3 _Multiply_8BA0677C_Out_2;
				Unity_Multiply_float((_Clamp_91CB4D22_Out_3.xxx), _Hue_7F9EC219_Out_2, _Multiply_8BA0677C_Out_2);
				float _DotProduct_CBB43A1C_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 0, 1), _DotProduct_CBB43A1C_Out_2);
				float _Clamp_8F0CC6C9_Out_3;
				Unity_Clamp_float(_DotProduct_CBB43A1C_Out_2, 0, 1, _Clamp_8F0CC6C9_Out_3);
				float3 _Multiply_51583BDF_Out_2;
				Unity_Multiply_float((_Clamp_8F0CC6C9_Out_3.xxx), _Hue_7F9EC219_Out_2, _Multiply_51583BDF_Out_2);
				float3 _Add_153B9028_Out_2;
				Unity_Add_float3(_Multiply_8BA0677C_Out_2, _Multiply_51583BDF_Out_2, _Add_153B9028_Out_2);
				float3 _Add_8E9A68D5_Out_2;
				Unity_Add_float3(_Multiply_6E3BD1F4_Out_2, _Add_153B9028_Out_2, _Add_8E9A68D5_Out_2);
				float _DotProduct_20D99D5B_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(-1, 0, 0), _DotProduct_20D99D5B_Out_2);
				float _Clamp_ABF00F4A_Out_3;
				Unity_Clamp_float(_DotProduct_20D99D5B_Out_2, 0, 1, _Clamp_ABF00F4A_Out_3);
				float3 _Property_6D7BAC07_Out_0 = Vector3_9CE3C5CA;
				float _Property_36597EC1_Out_0 = Vector1_F527440;
				float _Multiply_DA7D2E0F_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_36597EC1_Out_0, _Multiply_DA7D2E0F_Out_2);
				float _SawtoothWave_51BEAF94_Out_1;
				SawtoothWave_float(_Multiply_DA7D2E0F_Out_2, _SawtoothWave_51BEAF94_Out_1);
				float _Remap_2B1AF1EA_Out_3;
				Unity_Remap_float(_SawtoothWave_51BEAF94_Out_1, float2 (-1, 1), float2 (1, 2), _Remap_2B1AF1EA_Out_3);
				float3 _Hue_4801A435_Out_2;
				Unity_Hue_Normalized_float(_Property_6D7BAC07_Out_0, _Remap_2B1AF1EA_Out_3, _Hue_4801A435_Out_2);
				float3 _Multiply_54D4AE1F_Out_2;
				Unity_Multiply_float((_Clamp_ABF00F4A_Out_3.xxx), _Hue_4801A435_Out_2, _Multiply_54D4AE1F_Out_2);
				float _DotProduct_1D7446D4_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(1, 0, 0), _DotProduct_1D7446D4_Out_2);
				float _Clamp_63F3AD00_Out_3;
				Unity_Clamp_float(_DotProduct_1D7446D4_Out_2, 0, 1, _Clamp_63F3AD00_Out_3);
				float3 _Multiply_AEC30BB1_Out_2;
				Unity_Multiply_float((_Clamp_63F3AD00_Out_3.xxx), _Hue_4801A435_Out_2, _Multiply_AEC30BB1_Out_2);
				float3 _Add_51F960E3_Out_2;
				Unity_Add_float3(_Multiply_54D4AE1F_Out_2, _Multiply_AEC30BB1_Out_2, _Add_51F960E3_Out_2);
				float3 _Add_66DF0F1D_Out_2;
				Unity_Add_float3(_Add_8E9A68D5_Out_2, _Add_51F960E3_Out_2, _Add_66DF0F1D_Out_2);
				surface.Albedo = _Add_66DF0F1D_Out_2;
				surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
				surface.Alpha = 1;
				surface.AlphaClipThreshold = 0;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord0 : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct VertexOutput
			{
				float2 uv           : TEXCOORD0;
				float4 clipPos      : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				half4 uv0 : TEXCOORD8;
				half4 uv1 : TEXCOORD9;

				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			VertexOutput vert(GraphVertexInput v)
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				// Vertex transformations performed by graph
				float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
				float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 uv0 = v.texcoord0;
				float4 uv1 = v.texcoord1;
				float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

				VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

				// Vertex description inputs defined by graph
				vdi.ObjectSpacePosition = ObjectSpacePosition;

				VertexDescription vd = PopulateVertexData(vdi);
				v.vertex.xyz = vd.Position;

				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.uv0 = uv0;
				o.uv1 = uv1;

				o.clipPos = TransformObjectToHClip(v.vertex.xyz);
				return o;
			}

			half4 frag(VertexOutput IN) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

				// Pixel transformations performed by graph
				float3 WorldSpacePosition = IN.WorldSpacePosition;
				float3 WorldSpaceNormal = IN.WorldSpaceNormal;
				float3 WorldSpaceTangent = IN.WorldSpaceTangent;
				float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
				float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
				float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
				float4 uv0 = IN.uv0;
				float4 uv1 = IN.uv1;
				float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
				float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

				SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

				// Surface description inputs defined by graph
				surfaceInput.ObjectSpaceNormal = ObjectSpaceNormal;
				surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
				surfaceInput.uv0 = uv0;
				surfaceInput.TimeParameters = _TimeParameters.xyz;

				SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

				float3 Albedo = float3(0.5, 0.5, 0.5);
				float3 Emission = 0;
				float Alpha = 1;
				float AlphaClipThreshold = 0;

				// Surface description remap performed by graph
				Albedo = surf.Albedo;
				Emission = surf.Emission;
				Alpha = surf.Alpha;
				AlphaClipThreshold = surf.AlphaClipThreshold;

		 #if _AlphaClip
				clip(Alpha - AlphaClipThreshold);
		#endif
				return 0;
			}
			ENDHLSL
		}

			// This pass it not used during regular rendering, only for lightmap baking.
			Pass
			{
				Name "Meta"
				Tags{"LightMode" = "Meta"}

				Cull Off

				HLSLPROGRAM
				// Required to compile gles 2.0 with standard srp library
				#pragma prefer_hlslcc gles
				#pragma exclude_renderers d3d11_9x
				#pragma target 2.0

				#pragma vertex vert
				#pragma fragment frag

				float4 _MainTex_ST;

			// Defines generated by graph

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/MetaInput.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			#pragma shader_feature _ _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A

				CBUFFER_START(UnityPerMaterial)
			float Vector1_4EA516C8;
			float Vector1_F527440;
			float3 Vector3_9CE3C5CA;
			float Vector1_5E97D8B6;
			CBUFFER_END

			struct VertexDescriptionInputs
			{
				float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				float3 ObjectSpaceNormal;
				float3 TangentSpaceNormal;
				half4 uv0;
				float3 TimeParameters;
			};


			void Unity_Rotate_Degrees_float(float2 UV, float2 Center, float Rotation, out float2 Out)
			{
				//rotation matrix
				Rotation = Rotation * (3.1415926f / 180.0f);
				UV -= Center;
				float s = sin(Rotation);
				float c = cos(Rotation);

				//center rotation matrix
				float2x2 rMatrix = float2x2(c, -s, s, c);
				rMatrix *= 0.5;
				rMatrix += 0.5;
				rMatrix = rMatrix * 2 - 1;

				//multiply the UVs by the rotation matrix
				UV.xy = mul(UV.xy, rMatrix);
				UV += Center;

				Out = UV;
			}

			void Unity_Multiply_float(float A, float B, out float Out)
			{
				Out = A * B;
			}

			void SawtoothWave_float(float In, out float Out)
			{
				Out = 2 * (In - floor(0.5 + In));
			}

			void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
			{
				Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
			}

			void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
			{
				Out = UV * Tiling + Offset;
			}

			void Unity_Multiply_float(float2 A, float2 B, out float2 Out)
			{
				Out = A * B;
			}

			void Unity_Hue_Normalized_float(float3 In, float Offset, out float3 Out)
			{
				// RGB to HSV
				float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
				float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
				float D = Q.x - min(Q.w, Q.y);
				float E = 1e-10;
				float3 hsv = float3(abs(Q.z + (Q.w - Q.y) / (6.0 * D + E)), D / (Q.x + E), Q.x);

				float hue = hsv.x + Offset;
				hsv.x = (hue < 0)
						? hue + 1
						: (hue > 1)
							? hue - 1
							: hue;

				// HSV to RGB
				float4 K2 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				float3 P2 = abs(frac(hsv.xxx + K2.xyz) * 6.0 - K2.www);
				Out = hsv.z * lerp(K2.xxx, saturate(P2 - K2.xxx), hsv.y);
			}

			void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
			{
				Out = dot(A, B);
			}

			void Unity_Clamp_float(float In, float Min, float Max, out float Out)
			{
				Out = clamp(In, Min, Max);
			}

			void Unity_Multiply_float(float3 A, float3 B, out float3 Out)
			{
				Out = A * B;
			}

			void Unity_Add_float3(float3 A, float3 B, out float3 Out)
			{
				Out = A + B;
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Emission;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float3 _Property_46BF40E4_Out_0 = Vector3_9CE3C5CA;
				float _Property_AC2DE604_Out_0 = Vector1_4EA516C8;
				float2 _Rotate_8BCED528_Out_3;
				Unity_Rotate_Degrees_float(IN.uv0.xy, float2 (0, 0), _Property_AC2DE604_Out_0, _Rotate_8BCED528_Out_3);
				float _Property_E99C1633_Out_0 = Vector1_F527440;
				float _Multiply_B6D7DBEA_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_E99C1633_Out_0, _Multiply_B6D7DBEA_Out_2);
				float _SawtoothWave_82A17912_Out_1;
				SawtoothWave_float(_Multiply_B6D7DBEA_Out_2, _SawtoothWave_82A17912_Out_1);
				float _Remap_D5C587C4_Out_3;
				Unity_Remap_float(_SawtoothWave_82A17912_Out_1, float2 (-1, 1), float2 (0, 1), _Remap_D5C587C4_Out_3);
				float2 _TilingAndOffset_5D7BEC6_Out_3;
				Unity_TilingAndOffset_float(_Rotate_8BCED528_Out_3, float2 (1, 1), (_Remap_D5C587C4_Out_3.xx), _TilingAndOffset_5D7BEC6_Out_3);
				float2 _Multiply_4269420F_Out_2;
				Unity_Multiply_float(_TilingAndOffset_5D7BEC6_Out_3, float2(1, 0), _Multiply_4269420F_Out_2);
				float3 _Hue_C8049E61_Out_2;
				Unity_Hue_Normalized_float(_Property_46BF40E4_Out_0, (_Multiply_4269420F_Out_2).x, _Hue_C8049E61_Out_2);
				float _DotProduct_B23167C2_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 3, 0), _DotProduct_B23167C2_Out_2);
				float _Clamp_6DBB7D3_Out_3;
				Unity_Clamp_float(_DotProduct_B23167C2_Out_2, 0, 1, _Clamp_6DBB7D3_Out_3);
				float3 _Multiply_6E3BD1F4_Out_2;
				Unity_Multiply_float(_Hue_C8049E61_Out_2, (_Clamp_6DBB7D3_Out_3.xxx), _Multiply_6E3BD1F4_Out_2);
				float _DotProduct_86C002BE_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 0, -1), _DotProduct_86C002BE_Out_2);
				float _Clamp_91CB4D22_Out_3;
				Unity_Clamp_float(_DotProduct_86C002BE_Out_2, 0, 1, _Clamp_91CB4D22_Out_3);
				float3 _Property_45FD8123_Out_0 = Vector3_9CE3C5CA;
				float2 _TilingAndOffset_C249058B_Out_3;
				Unity_TilingAndOffset_float(IN.uv0.xy, float2 (1, 1), (_Remap_D5C587C4_Out_3.xx), _TilingAndOffset_C249058B_Out_3);
				float2 _Multiply_8483FBB_Out_2;
				Unity_Multiply_float(_TilingAndOffset_C249058B_Out_3, float2(1, 0), _Multiply_8483FBB_Out_2);
				float3 _Hue_7F9EC219_Out_2;
				Unity_Hue_Normalized_float(_Property_45FD8123_Out_0, (_Multiply_8483FBB_Out_2).x, _Hue_7F9EC219_Out_2);
				float3 _Multiply_8BA0677C_Out_2;
				Unity_Multiply_float((_Clamp_91CB4D22_Out_3.xxx), _Hue_7F9EC219_Out_2, _Multiply_8BA0677C_Out_2);
				float _DotProduct_CBB43A1C_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 0, 1), _DotProduct_CBB43A1C_Out_2);
				float _Clamp_8F0CC6C9_Out_3;
				Unity_Clamp_float(_DotProduct_CBB43A1C_Out_2, 0, 1, _Clamp_8F0CC6C9_Out_3);
				float3 _Multiply_51583BDF_Out_2;
				Unity_Multiply_float((_Clamp_8F0CC6C9_Out_3.xxx), _Hue_7F9EC219_Out_2, _Multiply_51583BDF_Out_2);
				float3 _Add_153B9028_Out_2;
				Unity_Add_float3(_Multiply_8BA0677C_Out_2, _Multiply_51583BDF_Out_2, _Add_153B9028_Out_2);
				float3 _Add_8E9A68D5_Out_2;
				Unity_Add_float3(_Multiply_6E3BD1F4_Out_2, _Add_153B9028_Out_2, _Add_8E9A68D5_Out_2);
				float _DotProduct_20D99D5B_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(-1, 0, 0), _DotProduct_20D99D5B_Out_2);
				float _Clamp_ABF00F4A_Out_3;
				Unity_Clamp_float(_DotProduct_20D99D5B_Out_2, 0, 1, _Clamp_ABF00F4A_Out_3);
				float3 _Property_6D7BAC07_Out_0 = Vector3_9CE3C5CA;
				float _Property_36597EC1_Out_0 = Vector1_F527440;
				float _Multiply_DA7D2E0F_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_36597EC1_Out_0, _Multiply_DA7D2E0F_Out_2);
				float _SawtoothWave_51BEAF94_Out_1;
				SawtoothWave_float(_Multiply_DA7D2E0F_Out_2, _SawtoothWave_51BEAF94_Out_1);
				float _Remap_2B1AF1EA_Out_3;
				Unity_Remap_float(_SawtoothWave_51BEAF94_Out_1, float2 (-1, 1), float2 (1, 2), _Remap_2B1AF1EA_Out_3);
				float3 _Hue_4801A435_Out_2;
				Unity_Hue_Normalized_float(_Property_6D7BAC07_Out_0, _Remap_2B1AF1EA_Out_3, _Hue_4801A435_Out_2);
				float3 _Multiply_54D4AE1F_Out_2;
				Unity_Multiply_float((_Clamp_ABF00F4A_Out_3.xxx), _Hue_4801A435_Out_2, _Multiply_54D4AE1F_Out_2);
				float _DotProduct_1D7446D4_Out_2;
				Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(1, 0, 0), _DotProduct_1D7446D4_Out_2);
				float _Clamp_63F3AD00_Out_3;
				Unity_Clamp_float(_DotProduct_1D7446D4_Out_2, 0, 1, _Clamp_63F3AD00_Out_3);
				float3 _Multiply_AEC30BB1_Out_2;
				Unity_Multiply_float((_Clamp_63F3AD00_Out_3.xxx), _Hue_4801A435_Out_2, _Multiply_AEC30BB1_Out_2);
				float3 _Add_51F960E3_Out_2;
				Unity_Add_float3(_Multiply_54D4AE1F_Out_2, _Multiply_AEC30BB1_Out_2, _Add_51F960E3_Out_2);
				float3 _Add_66DF0F1D_Out_2;
				Unity_Add_float3(_Add_8E9A68D5_Out_2, _Add_51F960E3_Out_2, _Add_66DF0F1D_Out_2);
				surface.Albedo = _Add_66DF0F1D_Out_2;
				surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
				surface.Alpha = 1;
				surface.AlphaClipThreshold = 0;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord0 : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct VertexOutput
			{
				float2 uv           : TEXCOORD0;
				float4 clipPos      : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				half4 uv0 : TEXCOORD8;
				half4 uv1 : TEXCOORD9;

				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			VertexOutput vert(GraphVertexInput v)
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				// Vertex transformations performed by graph
				float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
				float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 uv0 = v.texcoord0;
				float4 uv1 = v.texcoord1;
				float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;


				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.uv0 = uv0;
				o.uv1 = uv1;

				o.clipPos = MetaVertexPosition(v.vertex, uv1, uv1, unity_LightmapST, unity_DynamicLightmapST);
				return o;
			}

			half4 frag(VertexOutput IN) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

				// Pixel transformations performed by graph
				float3 WorldSpacePosition = IN.WorldSpacePosition;
				float3 WorldSpaceNormal = IN.WorldSpaceNormal;
				float3 WorldSpaceTangent = IN.WorldSpaceTangent;
				float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
				float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
				float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
				float4 uv0 = IN.uv0;
				float4 uv1 = IN.uv1;
				float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
				float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

				SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

				// Surface description inputs defined by graph
				surfaceInput.ObjectSpaceNormal = ObjectSpaceNormal;
				surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
				surfaceInput.uv0 = uv0;
				surfaceInput.TimeParameters = _TimeParameters.xyz;

				SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

				float3 Albedo = float3(0.5, 0.5, 0.5);
				float3 Emission = 0;
				float Alpha = 1;
				float AlphaClipThreshold = 0;

				// Surface description remap performed by graph
				Albedo = surf.Albedo;
				Emission = surf.Emission;
				Alpha = surf.Alpha;
				AlphaClipThreshold = surf.AlphaClipThreshold;

		 #if _AlphaClip
				clip(Alpha - AlphaClipThreshold);
		#endif

				MetaInput metaInput = (MetaInput)0;
				metaInput.Albedo = Albedo;
				metaInput.Emission = Emission;

				return MetaFragment(metaInput);
			}
			ENDHLSL
		}
		Pass
		{
			Tags{"LightMode" = "Lightweight2D"}

			// Material options generated by graph

			Blend One Zero, One Zero

			Cull Off

			ZTest LEqual

			ZWrite On

			HLSLPROGRAM
				// Required to compile gles 2.0 with standard srp library
				#pragma enable_d3d11_debug_symbols
				#pragma prefer_hlslcc gles
				#pragma exclude_renderers d3d11_9x
				#pragma target 2.0

				#pragma vertex vert
				#pragma fragment frag

				// Defines generated by graph

				#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
				#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
				#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

				CBUFFER_START(UnityPerMaterial)
				float Vector1_4EA516C8;
				float Vector1_F527440;
				float3 Vector3_9CE3C5CA;
				float Vector1_5E97D8B6;
				CBUFFER_END

				struct VertexDescriptionInputs
				{
					float3 ObjectSpacePosition;
				};

				struct SurfaceDescriptionInputs
				{
					float3 ObjectSpaceNormal;
					float3 TangentSpaceNormal;
					half4 uv0;
					float3 TimeParameters;
				};


				void Unity_Rotate_Degrees_float(float2 UV, float2 Center, float Rotation, out float2 Out)
				{
					//rotation matrix
					Rotation = Rotation * (3.1415926f / 180.0f);
					UV -= Center;
					float s = sin(Rotation);
					float c = cos(Rotation);

					//center rotation matrix
					float2x2 rMatrix = float2x2(c, -s, s, c);
					rMatrix *= 0.5;
					rMatrix += 0.5;
					rMatrix = rMatrix * 2 - 1;

					//multiply the UVs by the rotation matrix
					UV.xy = mul(UV.xy, rMatrix);
					UV += Center;

					Out = UV;
				}

				void Unity_Multiply_float(float A, float B, out float Out)
				{
					Out = A * B;
				}

				void SawtoothWave_float(float In, out float Out)
				{
					Out = 2 * (In - floor(0.5 + In));
				}

				void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
				{
					Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
				}

				void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
				{
					Out = UV * Tiling + Offset;
				}

				void Unity_Multiply_float(float2 A, float2 B, out float2 Out)
				{
					Out = A * B;
				}

				void Unity_Hue_Normalized_float(float3 In, float Offset, out float3 Out)
				{
					// RGB to HSV
					float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
					float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
					float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
					float D = Q.x - min(Q.w, Q.y);
					float E = 1e-10;
					float3 hsv = float3(abs(Q.z + (Q.w - Q.y) / (6.0 * D + E)), D / (Q.x + E), Q.x);

					float hue = hsv.x + Offset;
					hsv.x = (hue < 0)
							? hue + 1
							: (hue > 1)
								? hue - 1
								: hue;

					// HSV to RGB
					float4 K2 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
					float3 P2 = abs(frac(hsv.xxx + K2.xyz) * 6.0 - K2.www);
					Out = hsv.z * lerp(K2.xxx, saturate(P2 - K2.xxx), hsv.y);
				}

				void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
				{
					Out = dot(A, B);
				}

				void Unity_Clamp_float(float In, float Min, float Max, out float Out)
				{
					Out = clamp(In, Min, Max);
				}

				void Unity_Multiply_float(float3 A, float3 B, out float3 Out)
				{
					Out = A * B;
				}

				void Unity_Add_float3(float3 A, float3 B, out float3 Out)
				{
					Out = A + B;
				}

				struct VertexDescription
				{
					float3 Position;
				};

				VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
				{
					VertexDescription description = (VertexDescription)0;
					description.Position = IN.ObjectSpacePosition;
					return description;
				}

				struct SurfaceDescription
				{
					float3 Albedo;
					float3 Normal;
					float3 Emission;
					float Metallic;
					float Smoothness;
					float Occlusion;
					float Alpha;
					float AlphaClipThreshold;
				};

				SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
				{
					SurfaceDescription surface = (SurfaceDescription)0;
					float3 _Property_46BF40E4_Out_0 = Vector3_9CE3C5CA;
					float _Property_AC2DE604_Out_0 = Vector1_4EA516C8;
					float2 _Rotate_8BCED528_Out_3;
					Unity_Rotate_Degrees_float(IN.uv0.xy, float2 (0, 0), _Property_AC2DE604_Out_0, _Rotate_8BCED528_Out_3);
					float _Property_E99C1633_Out_0 = Vector1_F527440;
					float _Multiply_B6D7DBEA_Out_2;
					Unity_Multiply_float(IN.TimeParameters.x, _Property_E99C1633_Out_0, _Multiply_B6D7DBEA_Out_2);
					float _SawtoothWave_82A17912_Out_1;
					SawtoothWave_float(_Multiply_B6D7DBEA_Out_2, _SawtoothWave_82A17912_Out_1);
					float _Remap_D5C587C4_Out_3;
					Unity_Remap_float(_SawtoothWave_82A17912_Out_1, float2 (-1, 1), float2 (0, 1), _Remap_D5C587C4_Out_3);
					float2 _TilingAndOffset_5D7BEC6_Out_3;
					Unity_TilingAndOffset_float(_Rotate_8BCED528_Out_3, float2 (1, 1), (_Remap_D5C587C4_Out_3.xx), _TilingAndOffset_5D7BEC6_Out_3);
					float2 _Multiply_4269420F_Out_2;
					Unity_Multiply_float(_TilingAndOffset_5D7BEC6_Out_3, float2(1, 0), _Multiply_4269420F_Out_2);
					float3 _Hue_C8049E61_Out_2;
					Unity_Hue_Normalized_float(_Property_46BF40E4_Out_0, (_Multiply_4269420F_Out_2).x, _Hue_C8049E61_Out_2);
					float _DotProduct_B23167C2_Out_2;
					Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 3, 0), _DotProduct_B23167C2_Out_2);
					float _Clamp_6DBB7D3_Out_3;
					Unity_Clamp_float(_DotProduct_B23167C2_Out_2, 0, 1, _Clamp_6DBB7D3_Out_3);
					float3 _Multiply_6E3BD1F4_Out_2;
					Unity_Multiply_float(_Hue_C8049E61_Out_2, (_Clamp_6DBB7D3_Out_3.xxx), _Multiply_6E3BD1F4_Out_2);
					float _DotProduct_86C002BE_Out_2;
					Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 0, -1), _DotProduct_86C002BE_Out_2);
					float _Clamp_91CB4D22_Out_3;
					Unity_Clamp_float(_DotProduct_86C002BE_Out_2, 0, 1, _Clamp_91CB4D22_Out_3);
					float3 _Property_45FD8123_Out_0 = Vector3_9CE3C5CA;
					float2 _TilingAndOffset_C249058B_Out_3;
					Unity_TilingAndOffset_float(IN.uv0.xy, float2 (1, 1), (_Remap_D5C587C4_Out_3.xx), _TilingAndOffset_C249058B_Out_3);
					float2 _Multiply_8483FBB_Out_2;
					Unity_Multiply_float(_TilingAndOffset_C249058B_Out_3, float2(1, 0), _Multiply_8483FBB_Out_2);
					float3 _Hue_7F9EC219_Out_2;
					Unity_Hue_Normalized_float(_Property_45FD8123_Out_0, (_Multiply_8483FBB_Out_2).x, _Hue_7F9EC219_Out_2);
					float3 _Multiply_8BA0677C_Out_2;
					Unity_Multiply_float((_Clamp_91CB4D22_Out_3.xxx), _Hue_7F9EC219_Out_2, _Multiply_8BA0677C_Out_2);
					float _DotProduct_CBB43A1C_Out_2;
					Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 0, 1), _DotProduct_CBB43A1C_Out_2);
					float _Clamp_8F0CC6C9_Out_3;
					Unity_Clamp_float(_DotProduct_CBB43A1C_Out_2, 0, 1, _Clamp_8F0CC6C9_Out_3);
					float3 _Multiply_51583BDF_Out_2;
					Unity_Multiply_float((_Clamp_8F0CC6C9_Out_3.xxx), _Hue_7F9EC219_Out_2, _Multiply_51583BDF_Out_2);
					float3 _Add_153B9028_Out_2;
					Unity_Add_float3(_Multiply_8BA0677C_Out_2, _Multiply_51583BDF_Out_2, _Add_153B9028_Out_2);
					float3 _Add_8E9A68D5_Out_2;
					Unity_Add_float3(_Multiply_6E3BD1F4_Out_2, _Add_153B9028_Out_2, _Add_8E9A68D5_Out_2);
					float _DotProduct_20D99D5B_Out_2;
					Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(-1, 0, 0), _DotProduct_20D99D5B_Out_2);
					float _Clamp_ABF00F4A_Out_3;
					Unity_Clamp_float(_DotProduct_20D99D5B_Out_2, 0, 1, _Clamp_ABF00F4A_Out_3);
					float3 _Property_6D7BAC07_Out_0 = Vector3_9CE3C5CA;
					float _Property_36597EC1_Out_0 = Vector1_F527440;
					float _Multiply_DA7D2E0F_Out_2;
					Unity_Multiply_float(IN.TimeParameters.x, _Property_36597EC1_Out_0, _Multiply_DA7D2E0F_Out_2);
					float _SawtoothWave_51BEAF94_Out_1;
					SawtoothWave_float(_Multiply_DA7D2E0F_Out_2, _SawtoothWave_51BEAF94_Out_1);
					float _Remap_2B1AF1EA_Out_3;
					Unity_Remap_float(_SawtoothWave_51BEAF94_Out_1, float2 (-1, 1), float2 (1, 2), _Remap_2B1AF1EA_Out_3);
					float3 _Hue_4801A435_Out_2;
					Unity_Hue_Normalized_float(_Property_6D7BAC07_Out_0, _Remap_2B1AF1EA_Out_3, _Hue_4801A435_Out_2);
					float3 _Multiply_54D4AE1F_Out_2;
					Unity_Multiply_float((_Clamp_ABF00F4A_Out_3.xxx), _Hue_4801A435_Out_2, _Multiply_54D4AE1F_Out_2);
					float _DotProduct_1D7446D4_Out_2;
					Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(1, 0, 0), _DotProduct_1D7446D4_Out_2);
					float _Clamp_63F3AD00_Out_3;
					Unity_Clamp_float(_DotProduct_1D7446D4_Out_2, 0, 1, _Clamp_63F3AD00_Out_3);
					float3 _Multiply_AEC30BB1_Out_2;
					Unity_Multiply_float((_Clamp_63F3AD00_Out_3.xxx), _Hue_4801A435_Out_2, _Multiply_AEC30BB1_Out_2);
					float3 _Add_51F960E3_Out_2;
					Unity_Add_float3(_Multiply_54D4AE1F_Out_2, _Multiply_AEC30BB1_Out_2, _Add_51F960E3_Out_2);
					float3 _Add_66DF0F1D_Out_2;
					Unity_Add_float3(_Add_8E9A68D5_Out_2, _Add_51F960E3_Out_2, _Add_66DF0F1D_Out_2);
					surface.Albedo = _Add_66DF0F1D_Out_2;
					surface.Normal = IN.TangentSpaceNormal;
					surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
					surface.Metallic = 0;
					surface.Smoothness = 0.5;
					surface.Occlusion = 1;
					surface.Alpha = 1;
					surface.AlphaClipThreshold = 0;
					return surface;
				}

				struct GraphVertexInput
				{
					float4 vertex : POSITION;
					float3 normal : NORMAL;
					float4 tangent : TANGENT;
					float4 texcoord0 : TEXCOORD0;
					float4 texcoord1 : TEXCOORD1;
					UNITY_VERTEX_INPUT_INSTANCE_ID
				};


				struct GraphVertexOutput
				{
					float4 clipPos                : SV_POSITION;
					// Interpolators defined by graph
					float3 WorldSpacePosition : TEXCOORD3;
					float3 WorldSpaceNormal : TEXCOORD4;
					float3 WorldSpaceTangent : TEXCOORD5;
					float3 WorldSpaceBiTangent : TEXCOORD6;
					float3 WorldSpaceViewDirection : TEXCOORD7;
					half4 uv0 : TEXCOORD8;
					half4 uv1 : TEXCOORD9;

				};

				GraphVertexOutput vert(GraphVertexInput v)
				{
					GraphVertexOutput o = (GraphVertexOutput)0;

					// Vertex transformations performed by graph
					float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
					float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
					float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
					float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
					float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
					float4 uv0 = v.texcoord0;
					float4 uv1 = v.texcoord1;
					float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

					VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

					// Vertex description inputs defined by graph
					vdi.ObjectSpacePosition = ObjectSpacePosition;

					VertexDescription vd = PopulateVertexData(vdi);
					v.vertex.xyz = vd.Position;

					// Vertex shader outputs defined by graph
					o.WorldSpacePosition = WorldSpacePosition;
					o.WorldSpaceNormal = WorldSpaceNormal;
					o.WorldSpaceTangent = WorldSpaceTangent;
					o.WorldSpaceBiTangent = WorldSpaceBiTangent;
					o.WorldSpaceViewDirection = WorldSpaceViewDirection;
					o.uv0 = uv0;
					o.uv1 = uv1;


					VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
					o.clipPos = vertexInput.positionCS;

					return o;
				}

				half4 frag(GraphVertexOutput IN) : SV_Target
				{
					// Pixel transformations performed by graph
					float3 WorldSpacePosition = IN.WorldSpacePosition;
					float3 WorldSpaceNormal = IN.WorldSpaceNormal;
					float3 WorldSpaceTangent = IN.WorldSpaceTangent;
					float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
					float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
					float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
					float4 uv0 = IN.uv0;
					float4 uv1 = IN.uv1;
					float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
					float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

					SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

					// Surface description inputs defined by graph
					surfaceInput.ObjectSpaceNormal = ObjectSpaceNormal;
					surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
					surfaceInput.uv0 = uv0;
					surfaceInput.TimeParameters = _TimeParameters.xyz;

					SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

					float3 Albedo = float3(0.5, 0.5, 0.5);
					float3 Specular = float3(0, 0, 0);
					float Metallic = 1;
					float3 Normal = float3(0, 0, 1);
					float3 Emission = 0;
					float Smoothness = 0.5;
					float Occlusion = 1;
					float Alpha = 1;
					float AlphaClipThreshold = 0;

					// Surface description remap performed by graph
					Albedo = surf.Albedo;
					Normal = surf.Normal;
					Emission = surf.Emission;
					Metallic = surf.Metallic;
					Smoothness = surf.Smoothness;
					Occlusion = surf.Occlusion;
					Alpha = surf.Alpha;
					AlphaClipThreshold = surf.AlphaClipThreshold;


					// Computes fog factor per-vertex
					half4 color = half4(Albedo, Alpha);

			#if _AlphaClip
					clip(Alpha - AlphaClipThreshold);
			#endif
					return color;
				}

				ENDHLSL
			}
	}
		CustomEditor "UnityEditor.ShaderGraph.PBRMasterGUI"
					FallBack "Hidden/InternalErrorShader"
}
